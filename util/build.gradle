apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.bintray-release'
def librarys = rootProject.ext.dependencies
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
    api librarys["material_design"]
    api librarys["appcompat"]
    api librarys["multidex"]

    api librarys["utilcode"]
    api(librarys["ucrop"]) {
        exclude module: 'appcompat-v7'
        exclude module: 'okhttp'
    }
    //retrofit2
    api(librarys["retrofit"]) {
        exclude module: 'okhttp'
        exclude module: 'okio'
    }
    api(librarys["retrofit-adapter-rxjava2"]) {
        exclude module: 'rxjava'
        exclude module: 'okhttp'
        exclude module: 'retrofit'
        exclude module: 'okio'
    }
    api(librarys["retrofit-converter-gson"]) {
        exclude module: 'okhttp'
        exclude module: 'okio'
        exclude module: 'retrofit'
    }
    api(librarys["logging_interceptor"]) {
        exclude module: 'okhttp'
    }
    //rxjava
    api librarys["rxjava2"]
    api librarys["rxkotlin"]
    api(librarys["rxandroid2"]) {
        exclude module: 'rxjava'
    }

    api(librarys["rxlifecycle3_components"]) {
        exclude module: 'rxjava'
        exclude module: 'appcompat-v7'
    }
    api(librarys["rxlifecycle3_kotlin"]) {
        exclude module: 'rxjava'
    }

    api(librarys["rxpermissions2"]) {
        exclude module: 'rxjava'
        exclude module: 'support-annotations'
    }
    api librarys["SmartRefreshLayout"]
//    compile librarys["SmartRefreshHeader"]
    api librarys["BaseRecyclerViewAdapterHelper"]
    api librarys["circularAnim"]
    api(librarys["glide"]) {
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
    }
    api(librarys["glide_okhttp3_integration"]) {
        exclude group: 'glide-parent'
        exclude module: 'glide'
        exclude module: 'okhttp'
        exclude module: 'support-annotations'
    }
    api(librarys["okhttp3"]) {
    }
    kapt(librarys["glide_compiler"])
    api(librarys["immersionbar"]) {
        exclude module: 'appcompat-v7'
        exclude module: 'support-design'
    }
    api librarys["eventbus"]
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    api(librarys["matisse"]) {
        exclude module: 'support-v4'
        exclude module: 'appcompat-v7'
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    api librarys["Luban"]

    api librarys["xedittext"]
    api 'com.github.zzz40500:android-shapeLoadingView:1.0.3.2'
    api librarys["autosize"]
    api librarys["material_dialogs"]

}
repositories {
    mavenCentral()
}
def siteUrl = 'https://github.com/xiang473535976/kotlin_util'   // 项目的主页

publish {
    userOrg = 'xiang473535976'      //bintray注册的用户名
//    repoName = 'AcUtil'//远程仓库名字,不指明，默认是上传到maven
    groupId = 'x.aichen'         //compile引用时的第1部分groupId，一般为包名
    artifactId = 'util'     //compile引用时的第2部分项目名，这个需要与我们之前创建的package的Name一样，要不会上传失败
    publishVersion = '1.0.0_alpha14'    //compile引用时的第3部分版本号
    desc = 'This is a library '  //描述  随便写
    website = siteUrl  //项目的网页，可以写源码的GitHub地址
}
