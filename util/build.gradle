apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.novoda.bintray-release'
def librarys = rootProject.ext.dependencies
def cfg = rootProject.ext.android
android {
    compileSdkVersion cfg["compileSdkVersion"]
    buildToolsVersion cfg["buildToolsVersion"]

    defaultConfig {
        minSdkVersion cfg["minSdkVersion"]
        targetSdkVersion cfg["targetSdkVersion"]
        versionCode cfg["versionCode"]
        versionName cfg["versionName"]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "false"  // 显示Log
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "boolean", "LOG_DEBUG", "true"  // 显示Log
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile librarys["cardview_v7"]
    compile librarys["utilcode"]
    compile librarys["ucrop"]
    //retrofit2
    compile librarys["retrofit"]
    compile librarys["retrofit-adapter-rxjava2"]
    compile librarys["retrofit-converter-gson"]
    compile librarys["logging_interceptor"]
    //rxjava
    compile librarys["rxjava2"]
    compile librarys["rxandroid2"]
    compile librarys["rxlifecycle2"]
    compile librarys["rxlifecycle2_components"]
    compile librarys["rxlifecycle2_kotlin"]
    compile librarys["rxlifecycle2_kotlin_lifecycle"]
    compile librarys["rxpermissions2"]
    compile librarys["SmartRefreshLayout"]
//    compile librarys["SmartRefreshHeader"]
    compile librarys["BaseRecyclerViewAdapterHelper"]
    compile librarys["circularAnim"]
    compile librarys["autolayout"]
    compile librarys["glide"]
    compile(librarys["glide_okhttp3"]) {
        exclude group: 'glide-parent'
    }
    kapt rootProject.ext.dependencies["glide_compiler"]
    compile rootProject.ext.dependencies["statusbarutil"]
    compile rootProject.ext.dependencies["eventbus"]
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    //内存泄漏检测
    debugCompile rootProject.ext.dependencies["canary_debug"]
    releaseCompile rootProject.ext.dependencies["canary_release"]
    compile rootProject.ext.dependencies["agentweb"]
    compile rootProject.ext.dependencies["matisse"]
    compile rootProject.ext.dependencies["Luban"]
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["xedittext"]
    compile 'com.tencent.sonic:sdk:3.0.0'
//    implementation "com.android.support:exifinterface:27.1.1"
}
repositories {
    mavenCentral()
}
def siteUrl = 'https://github.com/xiang473535976/kotlin_util'   // 项目的主页

publish {
    userOrg = 'xiang473535976'      //bintray注册的用户名
//    repoName = 'AcUtil'//远程仓库名字,不指明，默认是上传到maven
    groupId = 'x.aichen'         //compile引用时的第1部分groupId，一般为包名
    artifactId = 'util'     //compile引用时的第2部分项目名，这个需要与我们之前创建的package的Name一样，要不会上传失败
    publishVersion = '1.0.0'    //compile引用时的第3部分版本号
    desc = 'This is a library '  //描述  随便写
    website = siteUrl  //项目的网页，可以写源码的GitHub地址
}
